/*2013-11-05 */
function MemoryCore() {
    function a() {
        pingItem.clear(), compareSelection.clear();
    }
    function b() {
        console.log("enabled"), g.controlItems.enabledAll();
    }
    function c() {
        console.log("disabled"), g.controlItems.enabledAll();
    }
    var d = MODEL.gameConfiguration;
    document.getElementById(d.ballAreaId);
    var e = MODEL.view.ballCenter.ball_arr, f = e.length, g = MODEL.view.ballCenter.interface, h = new UserRewardRoom(), i = 0, j = 500, k = 300, l = 1e3, m = [], n = [];
    pingItem = {
        timer: 0,
        round: 0,
        splashItem: function(a) {
            var b = g.accessItem.border(a);
            UTILITY.addClass(b, "selected"), setTimeout(function() {
                UTILITY.removeClass(b, "selected");
            }, k);
        },
        getRandomId: function() {
            var a = Math.floor(Math.random() * f);
            return a.toString();
        },
        startPing: function() {
            i = 1, compareSelection.clear(), m.push(pingItem.getRandomId());
            var a, b = 0;
            pingItem.timer = setInterval(function() {
                a = m[b], pingItem.splashItem(a), b === pingItem.round && (pingItem.pausePing(), 
                pingItem.round++), b++;
            }, j);
        },
        pausePing: function() {
            2 === i ? (c(), pingItem.startPing(), h.reward.clear()) : (b(), i = 2, clearInterval(pingItem.timer));
        },
        stopPing: function() {
            i = 0;
        }
    }, MODEL.core.pingItem = pingItem, compareSelection = {
        clear: function() {
            n = [];
        },
        userSelection: function(a) {
            n.push(a), compareSelection.checkIfCorrect();
        },
        checkIfCorrect: function() {
            console.log("checking"), n.length === m.length && (n.compare(m) ? (console.log("equal"), 
            h.reward.userWin(), setTimeout(function() {
                pingItem.pausePing();
            }, l)) : (console.log("Error"), compareSelection.clear(), h.reward.userFail()));
        }
    }, MODEL.core.compareSelection = compareSelection, this.startGame = function() {
        0 === i && pingItem.startPing();
    }, this.pauseGame = function() {}, this.stopGame = function() {
        a();
    };
}

function UserRewardRoom() {
    var a = MODEL.gameConfiguration;
    document.getElementById(a.rewardroomId);
    var b = document.getElementById("msg"), c = "";
    return reward = {
        nextLevel: function() {},
        userWin: function() {
            c = "userWin", reward.assignReward();
        },
        userFail: function() {
            c = "userFail", reward.assignReward();
        },
        assignReward: function() {
            UTILITY.addClass(b, c);
        },
        clear: function() {
            UTILITY.removeClass(b, c);
        }
    }, messageCentral = {
        userWinMessages: function() {},
        userFailMessages: function() {}
    }, {
        reward: reward
    };
}

function Ball(a) {
    this.id = a, this.ob = SVG.drawCircle("circle_" + a, {}), this.border = this.ob.querySelectorAll("circle.border")[0], 
    this.circle = this.ob.querySelectorAll("circle.circle")[0];
    var b = this, c = {
        click: function() {
            MODEL.core.compareSelection.userSelection(a);
        },
        overHandler: function() {
            UTILITY.addClass(b.border, "bHover");
        },
        outHandler: function() {
            UTILITY.removeClass(b.border, "bHover");
        },
        downHandler: function() {
            UTILITY.addClass(b.border, "bPress");
        },
        upHandler: function() {
            UTILITY.removeClass(b.border, "bPress");
        }
    };
    this.events = function(a) {
        UTILITY[a](this.circle, "click", c.click), UTILITY[a](this.circle, "mousedown", c.downHandler), 
        UTILITY[a](this.circle, "mouseup", c.upHandler), UTILITY[a](this.circle, "mouseover", c.overHandler), 
        UTILITY[a](this.circle, "mouseout", c.outHandler);
    }, b.enabled();
}

function BallCenter() {
    var a, b = MODEL.gameConfiguration, c = document.getElementById(b.ballAreaId), d = [], e = SVG.group("color-game", {
        viewBox: "-43 -43 800 600",
        width: "800px",
        height: "600px"
    });
    a = c.appendChild(e);
    var f = 0, g = 0, h = b.rows, i = b.circleRadio, j = b.circleMargin, k = b.rows * b.lines, l = 2 * i + j;
    b.circleStrokeColor;
    for (var m = k - 1, n = 0; m >= 0; m--, n++) {
        var o = new Ball(n), p = o.ob;
        o.circle_position({
            x: l * f,
            y: l * g
        }), f++ === h - 1 && (f = 0, g++), p.setAttribute("class", "circle-btn"), a.appendChild(p), 
        d.push(o);
    }
    MODEL.view.ballCenter.ball_arr = d;
    var q = {
        node: function(a) {
            return q.getObGroup(a).ob;
        },
        border: function(a) {
            return q.getObGroup(a).border;
        },
        circle: function(a) {
            return q.getObGroup(a).circle;
        },
        getObGroup: function(a) {
            for (var b = d.length, c = 0; b > c; c++) if (d[c].circle_id() === Number(a)) return d[c];
        }
    }, r = {
        enabledAll: function() {
            for (var a = d.length, b = 0; a > b; b++) d[b].enabled();
        },
        disabledAll: function() {
            for (var a = d.length, b = 0; a > b; b++) d[b].disabled();
        }
    };
    return {
        accessItem: q,
        controlItems: r
    };
}

function View() {
    var a = new BallCenter();
    MODEL.view.ballCenter.interface = a;
}

UTILITY = {}, UTILITY.mergeOb = function(a, b) {
    var c;
    for (c in b) a[c] = b[c];
    return a;
}, UTILITY.addEventListener = function(a, b, c) {
    a.addEventListener(b, function(b) {
        c(a, b);
    }, !1);
}, UTILITY.removeEventListener = function(a, b, c) {
    a.removeEventListener(b, function(b) {
        c(a, b);
    }, !1);
}, UTILITY.shuffle = function(a) {
    for (var b, c, d = a.length; d; ) c = Math.floor(Math.random() * d--), b = a[d], 
    a[d] = a[c], a[c] = b;
    return a;
}, UTILITY.addClass = function(a, b) {
    var c = null !== a.getAttribute("class") ? a.getAttribute("class") : "";
    a.setAttribute("class", c + " " + b);
}, UTILITY.removeClass = function(a, b) {
    a.setAttribute("class", a.getAttribute("class").split(b).join(""));
}, UTILITY.prototypeINIT = function() {
    Array.prototype.compare = function(a) {
        if (!a) return !1;
        if (this.length != a.length) return !1;
        for (var b = 0; b < this.length; b++) if (this[b] instanceof Array && a[b] instanceof Array) {
            if (!this[b].compare(a[b])) return !1;
        } else if (this[b] != a[b]) return !1;
        return !0;
    };
}, UTILITY.prototypeINIT(), SVG = {}, SVG.header = '<?xml version="1.0" encoding="utf-8"?>', 
SVG.header += '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Basic//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd">', 
SVG.xmlns = "http://www.w3.org/2000/svg", SVG.group = function(a, b) {
    function c() {
        var a, b = document.createElementNS(SVG.xmlns, "svg");
        for (a in e) b.setAttributeNS(null, a, e[a]);
        return b;
    }
    var d = {
        version: "1.1",
        width: "800px",
        height: "600px",
        viewBox: "0 0 800 600",
        preserveAspectRatio: "none",
        id: "group-" + a
    }, e = UTILITY.mergeOb(d, b);
    return new c();
}, SVG.drawCircle = function(a) {
    function b() {
        var b = document.createElementNS(SVG.xmlns, "g");
        b.setAttributeNS(null, "transform", "translate(0 0)"), b.setAttributeNS(null, "id", a);
        var c = {
            height: "86",
            width: "86",
            x: "-43",
            y: "-43",
            style: "fill:blue;opacity:0"
        };
        (function() {
            var a, b = document.createElementNS(SVG.xmlns, "rect");
            for (a in c) b.setAttributeNS(null, a, c[a]);
            return b;
        })();
        var d = {
            d: "M-23.8462-4.0352c0,0,3.6968-15.6182,23.8452-18.48c0,0,2.3838,2.9805,3.0996,6.3188\n			c0,0-17.645,1.6689-26.3486,18.0029L-23.8462-4.0352z M-10.4736-1.8359c0,0,2.1367-9.0254,13.7813-10.6792c0,0,1.3779,1.7227,1.791,3.6519\n			c0,0-10.1982,0.9648-15.2271,10.4043L-10.4736-1.8359z",
            fill: "#E0E0E0",
            stroke: "none",
            style: "fill-opacity:0.8"
        }, e = function() {
            var a, b = document.createElementNS(SVG.xmlns, "path");
            for (a in d) b.setAttributeNS(null, a, d[a]);
            return b;
        }(), f = {
            fill: "#E0E0E0",
            r: 40,
            cx: "0",
            cy: "0",
            "class": "border"
        }, g = function() {
            var a, b = document.createElementNS(SVG.xmlns, "circle");
            for (a in f) b.setAttributeNS(null, a, f[a]);
            return b;
        }(), h = {
            fill: SVG.colorGallery.getRandomColor(),
            r: 29,
            cx: "0",
            cy: "0",
            "class": "circle"
        }, i = function() {
            var a, b = document.createElementNS(SVG.xmlns, "circle");
            for (a in h) b.setAttributeNS(null, a, h[a]);
            return b;
        }();
        return b.appendChild(g), b.appendChild(i), b.appendChild(e), b;
    }
    return new b();
}, SVG.colorGallery = {
    getRandomColor: function() {
        for (var a = "0123456789ABCDEF".split(""), b = "#", c = 0; 6 > c; c++) b += a[Math.round(15 * Math.random())];
        return b;
    }
}, SVG.effectsGallery = {
    filterNode: function(a) {
        var b = document.createElementNS(SVG.xmlns, "filter");
        return b.setAttributeNS(null, "id", a), b.setAttributeNS(null, "height", "130%"), 
        b;
    },
    dropAndShadow: function(a) {
        var b = SVG.effectsGallery.filterNode(a);
        console.log(b);
        var c = document.createElementNS(SVG.xmlns, "feGaussianBlur");
        c.setAttributeNS(null, "in", "SourceAlpha"), c.setAttributeNS(null, "stdDeviation", "2"), 
        c.setAttributeNS(null, "result", "blur");
        var d = document.createElementNS(SVG.xmlns, "feOffset");
        d.setAttributeNS(null, "dx", "2"), d.setAttributeNS(null, "dy", "2"), d.setAttributeNS(null, "result", "offsetblur");
        for (var e = document.createElementNS(SVG.xmlns, "feMerge"), f = [ "offsetblur", "SourceGraphic" ], g = 0; g < f.length; g++) {
            var h = document.createElementNS(SVG.xmlns, "feMergeNode");
            h.setAttributeNS(null, "in", f[g]), e.appendChild(h);
        }
        return b.appendChild(c), b.appendChild(d), b.appendChild(e), b;
    }
}, Ball.prototype.enabled = function() {
    this.events("addEventListener");
}, Ball.prototype.disabled = function() {
    this.events("removeEventListener");
}, Ball.prototype.circle_id = function() {
    return Number(this.id);
}, Ball.prototype.circle_position = function(a) {
    this.ob.setAttribute("transform", "translate(" + a.x + " " + a.y + ")");
}, Ball.prototype.circle = function() {
    return this.ob;
}, MODEL = {}, MODEL.gameConfiguration = {}, MODEL.view = {
    ballCenter: {
        "interface": {},
        ball_arr: []
    }
}, MODEL.core = {
    pingItem: {},
    compareSelection: {}
};

var MemoryGame = function() {
    function a(a) {
        UTILITY.mergeOb(c, a), b();
    }
    function b() {
        MODEL.gameConfiguration = c, new View();
        var a = new MemoryCore();
        a.startGame();
    }
    var c = {
        gameNodeId: "game",
        ballAreaId: "ballCenter",
        historyAreaId: "historyArea",
        rewardroomId: "rewardroom",
        rows: 4,
        lines: 3,
        circleRadio: 40,
        circleMargin: 5,
        circleStrokeColor: "#CCCCCC",
        startLevel: 0
    };
    return {
        configuration: a,
        tempContinue: function() {
            MODEL.core.pingItem.pausePing();
        }
    };
}();

window.MemoryGame = MemoryGame;